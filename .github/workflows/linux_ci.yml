name: Linux

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
        - {
            name: "Ubuntu Latest Clang",
            os: ubuntu-latest,
            cc: "clang", cxx: "clang++"
          }

    steps:
    - uses: actions/checkout@v2
    - name: Download Packages
      run: |         
        wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-bionic.list http://packages.lunarg.com/vulkan/lunarg-vulkan-bionic.list
        sudo apt update
        sudo apt-get install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev 
        sudo apt-get install vulkan-sdk python3.6 tbb
        sudo rm /usr/bin/python
        sudo ln -sfn /usr/bin/python3.6
    - name: Download GCC
      run: sudo apt-get install gcc-10 g++-10
    - name: Download Clang
      if: ${{ matrix.config.name == 'Ubuntu Latest Clang' }}
      run: sudo apt-get install clang-10 ninja-build
    - name: Configure
      shell: cmake -P {0}
      run: |
        set(C_COMPILER ${{ matrix.config.cc }})
        set(CXX_COMPILER ${{ matrix.config.cxx }})

        if (C_COMPILER STREQUAL "gcc" AND CXX_COMPILER STREQUAL "g++")
          execute_process(
            COMMAND cmake
              -S .
              -B build
              -D CMAKE_C_COMPILER=/usr/bin/gcc-10
              -D CMAKE_CXX_COMPILER=/usr/bin/g++-10
              -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
              -D VERMILLON_BUILD_TESTS=ON
              -D VERMILLON_SANITIZE_ADDRESS=OFF
            RESULT_VARIABLE result
          )
        else ()
          execute_process(
            COMMAND cmake
              -S .
              -B build
              -G Ninja
              -D CMAKE_C_COMPILER=/usr/bin/clang-10
              -D CMAKE_CXX_COMPILER=/usr/bin/clang++-10
              -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
              -D VERMILLON_BUILD_TESTS=ON
              -D VERMILLON_SANITIZE_ADDRESS=OFF
            RESULT_VARIABLE result
          )
        endif()

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
    - name: Build
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND cmake --build build
          RESULT_VARIABLE result
        )

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
    - name: Tests
      shell: cmake -P {0}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)

        execute_process(
          COMMAND ctest --verbose -j ${n}
          WORKING_DIRECTORY build
          RESULT_VARIABLE result
        )

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
